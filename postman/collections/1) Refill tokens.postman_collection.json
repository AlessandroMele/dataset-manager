{
	"info": {
		"_postman_id": "71140a86-1669-4611-8c2e-9788bf2be4f1",
		"name": "1) Refill tokens",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "No tokenJWT",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"No tokenJWT\", function () {\r",
							"  pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"pm.test(\"Confirm response message\", function () {\r",
							"  var jsonData = pm.response.json();\r",
							"  pm.expect(jsonData.message).to.eql(\"Unauthorized\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/user/updateToken",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"user",
						"updateToken"
					]
				}
			},
			"response": []
		},
		{
			"name": "Malformed tokenJWT",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Malformed tokenJWT\", function () {\r",
							"  pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"pm.test(\"Confirm response message\", function () {\r",
							"  var jsonData = pm.response.json();\r",
							"  pm.expect(jsonData.message).to.eql(\"Unauthorized\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "ciaociao",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/user/updateToken",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"user",
						"updateToken"
					]
				}
			},
			"response": []
		},
		{
			"name": "No tokens specified",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"No token specified\", function () {\r",
							"  pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Confirm response message\", function () {\r",
							"  var jsonData = pm.response.json();\r",
							"  pm.expect(jsonData.message).to.eql(\"Need to specify a valid 'token' number (max 10000)\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token-admin}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"user\": \"user\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/user/updateToken",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"user",
						"updateToken"
					]
				}
			},
			"response": []
		},
		{
			"name": "Negative tokens",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Number of token can't be negative\", function () {\r",
							"  pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Confirm response message\", function () {\r",
							"  var jsonData = pm.response.json();\r",
							"  pm.expect(jsonData.message).to.eql(\"Need to specify a valid 'token' number (max 10000)\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token-admin}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"user\": \"user\",\r\n    \"token\": -10\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/user/updateToken",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"user",
						"updateToken"
					]
				}
			},
			"response": []
		},
		{
			"name": "Too many tokens",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Number of token can't be negative\", function () {\r",
							"  pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Confirm response message\", function () {\r",
							"  var jsonData = pm.response.json();\r",
							"  pm.expect(jsonData.message).to.eql(\"Need to specify a valid 'token' number (max 10000)\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token-admin}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"user\": \"user\",\r\n    \"token\": 100000\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/user/updateToken",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"user",
						"updateToken"
					]
				}
			},
			"response": []
		},
		{
			"name": "No username",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"No email\", function () {\r",
							"  pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Confirm response message\", function () {\r",
							"  var jsonData = pm.response.json();\r",
							"  pm.expect(jsonData.message).to.eql(\"Need to specify a valid 'username' (max 30 char)\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token-admin}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"token\":300\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/user/updateToken",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"user",
						"updateToken"
					]
				}
			},
			"response": []
		},
		{
			"name": "User not found",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"User not found\", function () {\r",
							"  pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Confirm response message\", function () {\r",
							"  var jsonData = pm.response.json();\r",
							"  pm.expect(jsonData.message).to.eql(\"No user found with this username\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token-admin}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"token\": 3333,\r\n    \"username\": \"user sbagliato\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/user/updateToken",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"user",
						"updateToken"
					]
				}
			},
			"response": []
		},
		{
			"name": "User is not authorized (use an user token)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"User is not uthorized (use an user token)\", function () {\r",
							"  pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"pm.test(\"Confirm response message\", function () {\r",
							"  var jsonData = pm.response.json();\r",
							"  pm.expect(jsonData.message).to.eql(\"Sorry, you are not the admin\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token-user}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"users1@users1.it\",\r\n    \"token\": 333\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/user/updateToken",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"user",
						"updateToken"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Update success\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Confirm response message\", function () {\r",
							"  var jsonData = pm.response.json();\r",
							"  pm.expect(jsonData.username).to.eql(\"user\");\r",
							"  pm.expect(jsonData.role).to.eql(\"user\");\r",
							"  pm.expect(jsonData.password).to.eql(\"password2\");\r",
							"  pm.expect(jsonData.email).to.eql(\"users1@users1.it\");\r",
							"  pm.expect(jsonData.token).to.eql(\"80.000\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token-admin}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"user\",\r\n    \"token\": 80\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/user/updateToken",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"user",
						"updateToken"
					]
				}
			},
			"response": []
		}
	]
}